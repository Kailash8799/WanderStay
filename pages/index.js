import Head from "next/head";
// import HomeHeader from "./compotents/Navbar/HomeHeader";
// import HomeFooter from "./compotents/Footer/HomeFooter";
// import GetListing from "./compotents/AllListing/GetListing";
import { getSession } from "next-auth/react";
import { useRouter, useSearchParams } from "next/navigation";
import qs from 'query-string'
import {motion} from 'framer-motion'

export default function Home({
  setshowloginModal,
  setshowsignupModal,
  setshowrentModal,
  allListings,
  favListings,
  setshowfilterModal,
  setshowresetfilterModal
}) {

  const router = useRouter()
  const params = useSearchParams()

  const handleClick = ()=>{
    let currentQuery = {}
    if(params){
      currentQuery = qs.parse(params.toString());
    }
    const updatedquery = {
      ...currentQuery,
    }
    if(params?.get('category')){
      delete updatedquery.category
    }
    if(params?.get('country')){
      delete updatedquery.country
    }
    if(params?.get('bathrooms')){
      delete updatedquery.bathrooms
    }
    if(params?.get('guests')){
      delete updatedquery.guests
    }
    if(params?.get('rooms')){
      delete updatedquery.rooms
    }
    if(params?.get('roomprice')){
      delete updatedquery.roomprice
    }
    if (params?.get("startdate")) {
      delete updatedquery?.startdate;
    }
    if (params?.get("enddate")) {
      delete updatedquery?.enddate;
    }

    const url = qs.stringifyUrl({
      url:'/',
      query:updatedquery
    },{skipNull:true})

    router.push(url)
  }
  return (
    <>
      <Head>
        <title>Air bnb clone</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <motion.main 
       initial={{ opacity: 0, y: 20 }}
       animate={{ opacity: 1, y: 0 }}
       exit={{ opacity: 0, y: 20 }}
       transition={{delay:0.1}}
       className="min-h-screen"
       >
        {/* <HomeHeader
          setshowloginModal={setshowloginModal}
          setshowrentModal={setshowrentModal}
          setshowsignupModal={setshowsignupModal}
          setshowfilterModal={setshowfilterModal}
          setshowresetfilterModal={setshowresetfilterModal}
        /> */}
        <div className="mx-4 mb-10 lg:mx-16 md:mx-10">
          {allListings?.length !== 0 ? (
            <div className="min-h-[60vh] pt-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-4 gap-8">
              {/* {allListings?.map((item) => {
                return (
                  <GetListing
                    setshowloginModal={setshowloginModal}
                    key={item.id}
                    item={item}
                    wishlisted={favListings.includes(item.id)}
                  />
                );
              })} */}
            </div>
          ) : (
            <div className="items-center justify-center h-[60vh] text-center">
              <div className="relative top-24">
                <h1 className="items-center text-xl font-semibold text-center text-black dark:text-white">
                  No exact matches
                </h1>
                <h1 className="items-center text-base text-center text-black dark:text-white">
                  Try changing or removing some of your filters
                </h1>
                <h1
                  onClick={handleClick}
                  className="items-center w-40 p-3 mx-auto mt-5 text-base text-center text-black border border-black rounded-lg cursor-pointer dark:border-white dark:text-white"
                >
                  Remove all filters
                </h1>
              </div>
            </div>
          )}
        </div>
        {/* <HomeFooter /> */}
      </motion.main>
    </>
  );
}
export const getServerSideProps = async (context) => {
  const  session = await getSession(context)
  try {
    const responce = await fetch(
      `${process.env.NEXT_PUBLIC_HOST}/api/fetchlisting`,
      {
        method: "POST",
        body: JSON.stringify({
          category:context.query.category,
          country:context.query.country,
          bathrooms:context.query.bathrooms,
          guests:context.query.guests,
          rooms:context.query.rooms,
          roomprice:context.query.roomprice,
          startdate:context.query.startdate,
          enddate:context.query.enddate,
          secret: "thiswillbekailashloginsystem",
        }),
        headers: {
          "Content-type": "application/json",
        },
      }
    );
    console.log(responce);
    let favListings = []
    if (session && session?.user?.email) {
      const userFavIds = await fetch(
        `${process.env.NEXT_PUBLIC_HOST}/api/favourites`,
        {
          method: "POST",
          body: JSON.stringify({
            email: session?.user?.email,
            secret: "thiswillbekailashloginsystem",
          }),
          headers: {
            "Content-type": "application/json",
          },
        }
      );
      const res = await userFavIds.json()
      favListings = res.data;
    }
    const data = await responce.json();
    return { props: { allListings: data?.data || [],favListings } };
  } catch (error) {
    return { props: { allListings: [],favListings:[] } };
  }
};
